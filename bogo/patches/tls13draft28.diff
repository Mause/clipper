diff -u bogo-clean/common.go bogo/common.go
--- bogo-clean/common.go	2018-07-29 10:48:18.000000000 +0100
+++ bogo/common.go	2018-07-29 11:20:31.043224508 +0100
@@ -44,7 +44,6 @@
 
 var allTLSWireVersions = []uint16{
 	tls13Draft28Version,
-	tls13Draft23Version,
 	VersionTLS12,
 	VersionTLS11,
 	VersionTLS10,
@@ -1691,7 +1690,7 @@
 // false.
 func (c *Config) isSupportedVersion(wireVers uint16, isDTLS bool) (uint16, bool) {
 	if (c.TLS13Variant != TLS13Draft23 && wireVers == tls13Draft23Version) ||
-		(c.TLS13Variant != TLS13Draft28 && wireVers == tls13Draft28Version) {
+		(c.TLS13Variant != TLS13Draft28 && c.TLS13Variant != 0 && wireVers == tls13Draft28Version) {
 		return 0, false
 	}
 
diff -u bogo-clean/runner.go bogo/runner.go
--- bogo-clean/runner.go	2018-07-29 13:21:39.190954489 +0100
+++ bogo/runner.go	2018-07-29 11:16:46.330288904 +0100
@@ -1393,13 +1393,6 @@
 		versionDTLS: VersionDTLS12,
 	},
 	{
-		name:         "TLS13Draft23",
-		version:      VersionTLS13,
-		excludeFlag:  "-no-tls13",
-		versionWire:  tls13Draft23Version,
-		tls13Variant: TLS13Draft23,
-	},
-	{
 		name:         "TLS13Draft28",
 		version:      VersionTLS13,
 		excludeFlag:  "-no-tls13",
@@ -2898,20 +2891,20 @@
 		},
 		{
 			testType: clientTest,
-			name:     "TLS13Draft23-InvalidCompressionMethod",
+			name:     "TLS13Draft28-InvalidCompressionMethod",
 			config: Config{
 				MaxVersion: VersionTLS13,
 				Bugs: ProtocolBugs{
 					SendCompressionMethod: 1,
 				},
 			},
-			tls13Variant:  TLS13Draft23,
+			tls13Variant:  TLS13Draft28,
 			shouldFail:    true,
 			expectedError: ":DECODE_ERROR:",
 		},
 		{
 			testType: clientTest,
-			name:     "TLS13Draft23-HRR-InvalidCompressionMethod",
+			name:     "TLS13Draft28-HRR-InvalidCompressionMethod",
 			config: Config{
 				MaxVersion:       VersionTLS13,
 				CurvePreferences: []CurveID{CurveP384},
@@ -2919,7 +2912,7 @@
 					SendCompressionMethod: 1,
 				},
 			},
-			tls13Variant:       TLS13Draft23,
+			tls13Variant:       TLS13Draft28,
 			shouldFail:         true,
 			expectedError:      ":DECODE_ERROR:",
 			expectedLocalError: "remote error: error decoding message",
@@ -4012,7 +4005,7 @@
 	// Test that an empty client CA list doesn't send a CA extension.
 	testCases = append(testCases, testCase{
 		testType: serverTest,
-		name:     "TLS13Draft23-Empty-Client-CA-List",
+		name:     "TLS13Draft28-Empty-Client-CA-List",
 		config: Config{
 			MaxVersion:   VersionTLS13,
 			Certificates: []Certificate{rsaCertificate},
@@ -4020,7 +4013,7 @@
 				ExpectNoCertificateAuthoritiesExtension: true,
 			},
 		},
-		tls13Variant: TLS13Draft23,
+		tls13Variant: TLS13Draft28,
 		flags: []string{
 			"-require-any-client-certificate",
 			"-use-client-ca-list", "<EMPTY>",
@@ -4378,7 +4371,7 @@
 		})
 
 		tests = append(tests, testCase{
-			name: "TLS13Draft23-HelloRetryRequest-Client",
+			name: "TLS13Draft28-HelloRetryRequest-Client",
 			config: Config{
 				MaxVersion: VersionTLS13,
 				MinVersion: VersionTLS13,
@@ -4389,21 +4382,21 @@
 					ExpectMissingKeyShare: true,
 				},
 			},
-			tls13Variant: TLS13Draft23,
+			tls13Variant: TLS13Draft28,
 			// Cover HelloRetryRequest during an ECDHE-PSK resumption.
 			resumeSession: true,
 		})
 
 		tests = append(tests, testCase{
 			testType: serverTest,
-			name:     "TLS13Draft23-HelloRetryRequest-Server",
+			name:     "TLS13Draft28-HelloRetryRequest-Server",
 			config: Config{
 				MaxVersion: VersionTLS13,
 				MinVersion: VersionTLS13,
 				// Require a HelloRetryRequest for every curve.
 				DefaultCurves: []CurveID{},
 			},
-			tls13Variant: TLS13Draft23,
+			tls13Variant: TLS13Draft28,
 			// Cover HelloRetryRequest during an ECDHE-PSK resumption.
 			resumeSession: true,
 		})
@@ -5629,7 +5622,7 @@
 		name:     "IgnoreClientVersionOrder",
 		config: Config{
 			Bugs: ProtocolBugs{
-				SendSupportedVersions: []uint16{VersionTLS12, tls13Draft23Version},
+				SendSupportedVersions: []uint16{VersionTLS12, tls13Draft28Version},
 			},
 		},
 		expectedVersion: VersionTLS13,
@@ -7960,14 +7953,14 @@
 		},
 	})
 	testCases = append(testCases, testCase{
-		name: "Renegotiate-Client-TLS13Draft23",
+		name: "Renegotiate-Client-TLS13Draft28",
 		config: Config{
 			MaxVersion: VersionTLS12,
 			Bugs: ProtocolBugs{
 				FailIfResumeOnRenego: true,
 			},
 		},
-		tls13Variant: TLS13Draft23,
+		tls13Variant: TLS13Draft28,
 		renegotiate:  1,
 		// Test renegotiation after both an initial and resumption
 		// handshake.
@@ -11810,7 +11803,7 @@
 		messageType: typeEndOfEarlyData,
 		test: testCase{
 			testType: serverTest,
-			name:     "TLS13Draft23-EndOfEarlyData",
+			name:     "TLS13Draft28-EndOfEarlyData",
 			config: Config{
 				MaxVersion: VersionTLS13,
 			},
@@ -11821,7 +11814,7 @@
 					ExpectEarlyDataAccepted: true,
 				},
 			},
-			tls13Variant:  TLS13Draft23,
+			tls13Variant:  TLS13Draft28,
 			resumeSession: true,
 			flags:         []string{"-enable-early-data"},
 		},
